.TH "QwtData" 3 "22 Mar 2009" "Qwt User's Guide" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QwtData \- \fBQwtData\fP defines an interface to any type of curve data.  

.PP
.SH SYNOPSIS
.br
.PP
\fC#include <qwt_data.h>\fP
.PP
Inherited by \fBQwtArrayData\fP, \fBQwtCPointerData\fP, and \fBQwtPolygonFData\fP.
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBQwtData\fP ()"
.br
.ti -1c
.RI "virtual \fB~QwtData\fP ()"
.br
.ti -1c
.RI "virtual \fBQwtData\fP * \fBcopy\fP () const =0"
.br
.ti -1c
.RI "virtual size_t \fBsize\fP () const =0"
.br
.ti -1c
.RI "virtual double \fBx\fP (size_t i) const =0"
.br
.ti -1c
.RI "virtual double \fBy\fP (size_t i) const =0"
.br
.ti -1c
.RI "virtual QwtDoubleRect \fBboundingRect\fP () const "
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBQwtData\fP & \fBoperator=\fP (const \fBQwtData\fP &)"
.br
.in -1c
.SH "Detailed Description"
.PP 
\fBQwtData\fP defines an interface to any type of curve data. 

Classes, derived from \fBQwtData\fP may:
.IP "\(bu" 2
store the data in almost any type of container
.IP "\(bu" 2
calculate the data on the fly instead of storing it 
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "QwtData::QwtData ()"
.PP
Constructor. 
.PP
.SS "QwtData::~QwtData ()\fC [virtual]\fP"
.PP
Destructor. 
.PP
.SH "Member Function Documentation"
.PP 
.SS "QwtDoubleRect QwtData::boundingRect () const\fC [virtual]\fP"
.PP
Returns the bounding rectangle of the data. If there is no bounding rect, like for empty data the rectangle is invalid: QwtDoubleRect::isValid() == false
.PP
\fBWarning:\fP
.RS 4
This is an slow implementation iterating over all points. It is intended to be overloaded by derived classes. In case of auto scaling \fBboundingRect()\fP is called for every replot, so it might be worth to implement a cache, or use x(0), x(\fBsize()\fP - 1) for ordered data ... 
.RE
.PP

.PP
Reimplemented in \fBQwtArrayData\fP, and \fBQwtCPointerData\fP.
.SS "virtual \fBQwtData\fP* QwtData::copy () const\fC [pure virtual]\fP"
.PP
\fBReturns:\fP
.RS 4
Pointer to a copy (virtual copy constructor) 
.RE
.PP

.PP
Implemented in \fBQwtPolygonFData\fP, \fBQwtArrayData\fP, and \fBQwtCPointerData\fP.
.SS "\fBQwtData\fP& QwtData::operator= (const \fBQwtData\fP &)\fC [protected]\fP"
.PP
Assignment operator (virtualized) 
.SS "virtual size_t QwtData::size () const\fC [pure virtual]\fP"
.PP
\fBReturns:\fP
.RS 4
Size of the data set 
.RE
.PP

.PP
Implemented in \fBQwtPolygonFData\fP, \fBQwtArrayData\fP, and \fBQwtCPointerData\fP.
.SS "virtual double QwtData::x (size_t i) const\fC [pure virtual]\fP"
.PP
Return the x value of data point i 
.PP
\fBParameters:\fP
.RS 4
\fIi\fP Index 
.RE
.PP
\fBReturns:\fP
.RS 4
x X value of data point i 
.RE
.PP

.PP
Implemented in \fBQwtPolygonFData\fP, \fBQwtArrayData\fP, and \fBQwtCPointerData\fP.
.SS "virtual double QwtData::y (size_t i) const\fC [pure virtual]\fP"
.PP
Return the y value of data point i 
.PP
\fBParameters:\fP
.RS 4
\fIi\fP Index 
.RE
.PP
\fBReturns:\fP
.RS 4
y Y value of data point i 
.RE
.PP

.PP
Implemented in \fBQwtPolygonFData\fP, \fBQwtArrayData\fP, and \fBQwtCPointerData\fP.

.SH "Author"
.PP 
Generated automatically by Doxygen for Qwt User's Guide from the source code.
