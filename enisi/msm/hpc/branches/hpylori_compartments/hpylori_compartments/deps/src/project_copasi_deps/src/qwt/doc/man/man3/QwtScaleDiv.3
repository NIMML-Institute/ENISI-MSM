.TH "QwtScaleDiv" 3 "22 Mar 2009" "Qwt User's Guide" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QwtScaleDiv \- A class representing a scale division.  

.PP
.SH SYNOPSIS
.br
.PP
\fC#include <qwt_scale_div.h>\fP
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBTickType\fP { \fBNoTick\fP =  -1, \fBMinorTick\fP, \fBMediumTick\fP, \fBMajorTick\fP, \fBNTickTypes\fP }"
.br
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBQwtScaleDiv\fP ()"
.br
.ti -1c
.RI "\fBQwtScaleDiv\fP (const \fBQwtDoubleInterval\fP &, QwtValueList[NTickTypes])"
.br
.ti -1c
.RI "\fBQwtScaleDiv\fP (double lowerBound, double upperBound, QwtValueList[NTickTypes])"
.br
.ti -1c
.RI "int \fBoperator==\fP (const \fBQwtScaleDiv\fP &s) const "
.br
.ti -1c
.RI "int \fBoperator!=\fP (const \fBQwtScaleDiv\fP &s) const "
.br
.ti -1c
.RI "void \fBsetInterval\fP (double lowerBound, double upperBound)"
.br
.ti -1c
.RI "void \fBsetInterval\fP (const \fBQwtDoubleInterval\fP &)"
.br
.ti -1c
.RI "\fBQwtDoubleInterval\fP \fBinterval\fP () const "
.br
.ti -1c
.RI "double \fBlowerBound\fP () const "
.br
.ti -1c
.RI "double \fBupperBound\fP () const "
.br
.ti -1c
.RI "double \fBrange\fP () const "
.br
.ti -1c
.RI "bool \fBcontains\fP (double v) const "
.br
.ti -1c
.RI "void \fBsetTicks\fP (int type, const QwtValueList &)"
.br
.ti -1c
.RI "const QwtValueList & \fBticks\fP (int type) const "
.br
.ti -1c
.RI "void \fBinvalidate\fP ()"
.br
.ti -1c
.RI "bool \fBisValid\fP () const "
.br
.ti -1c
.RI "void \fBinvert\fP ()"
.br
.in -1c
.SH "Detailed Description"
.PP 
A class representing a scale division. 

A scale division consists of its limits and 3 list of tick values qualified as major, medium and minor ticks.
.PP
In most cases scale divisions are calculated by a \fBQwtScaleEngine\fP.
.PP
\fBSee also:\fP
.RS 4
subDivideInto(), subDivide() 
.RE
.PP

.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBQwtScaleDiv::TickType\fP"
.PP
Scale tick types. 
.PP
.SH "Constructor & Destructor Documentation"
.PP 
.SS "QwtScaleDiv::QwtScaleDiv ()\fC [explicit]\fP"
.PP
Construct an invalid \fBQwtScaleDiv\fP instance. 
.PP
.SS "QwtScaleDiv::QwtScaleDiv (const \fBQwtDoubleInterval\fP & interval, QwtValueList ticks[NTickTypes])\fC [explicit]\fP"
.PP
Construct \fBQwtScaleDiv\fP instance.
.PP
\fBParameters:\fP
.RS 4
\fIinterval\fP Interval 
.br
\fIticks\fP List of major, medium and minor ticks 
.RE
.PP

.SS "QwtScaleDiv::QwtScaleDiv (double lowerBound, double upperBound, QwtValueList ticks[NTickTypes])\fC [explicit]\fP"
.PP
Construct \fBQwtScaleDiv\fP instance.
.PP
\fBParameters:\fP
.RS 4
\fIlowerBound\fP First interval limit 
.br
\fIupperBound\fP Second interval limit 
.br
\fIticks\fP List of major, medium and minor ticks 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "bool QwtScaleDiv::contains (double value) const"
.PP
Return if a value is between \fBlowerBound()\fP and \fBupperBound()\fP
.PP
\fBParameters:\fP
.RS 4
\fIvalue\fP Value 
.RE
.PP
\fBReturns:\fP
.RS 4
true/false 
.RE
.PP

.SS "\fBQwtDoubleInterval\fP QwtScaleDiv::interval () const\fC [inline]\fP"
.PP
\fBReturns:\fP
.RS 4
lowerBound -> upperBound 
.RE
.PP

.SS "void QwtScaleDiv::invalidate ()"
.PP
Invalidate the scale division. 
.PP
.SS "void QwtScaleDiv::invert ()"
.PP
Invert the scale divison. 
.PP
.SS "bool QwtScaleDiv::isValid () const"
.PP
Check if the scale division is valid. 
.PP
.SS "double QwtScaleDiv::lowerBound () const\fC [inline]\fP"
.PP
\fBReturns:\fP
.RS 4
lower bound 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBupperBound()\fP 
.RE
.PP

.SS "int QwtScaleDiv::operator!= (const \fBQwtScaleDiv\fP & s) const"
.PP
Inequality. 
.PP
\fBReturns:\fP
.RS 4
true if this instance is not equal to s 
.RE
.PP

.SS "int QwtScaleDiv::operator== (const \fBQwtScaleDiv\fP & other) const"
.PP
Equality operator. 
.PP
\fBReturns:\fP
.RS 4
true if this instance is equal to other 
.RE
.PP

.SS "double QwtScaleDiv::range () const\fC [inline]\fP"
.PP
\fBReturns:\fP
.RS 4
\fBupperBound()\fP - \fBlowerBound()\fP 
.RE
.PP

.SS "void QwtScaleDiv::setInterval (const \fBQwtDoubleInterval\fP & interval)"
.PP
Change the interval 
.PP
\fBParameters:\fP
.RS 4
\fIinterval\fP Interval 
.RE
.PP

.SS "void QwtScaleDiv::setInterval (double lowerBound, double upperBound)\fC [inline]\fP"
.PP
Change the interval 
.PP
\fBParameters:\fP
.RS 4
\fIlowerBound\fP lower bound 
.br
\fIupperBound\fP upper bound 
.RE
.PP

.SS "void QwtScaleDiv::setTicks (int type, const QwtValueList & ticks)"
.PP
Assign ticks
.PP
\fBParameters:\fP
.RS 4
\fItype\fP MinorTick, MediumTick or MajorTick 
.br
\fIticks\fP Values of the tick positions 
.RE
.PP

.SS "const QwtValueList & QwtScaleDiv::ticks (int type) const"
.PP
Return a list of ticks
.PP
\fBParameters:\fP
.RS 4
\fItype\fP MinorTick, MediumTick or MajorTick 
.RE
.PP

.SS "double QwtScaleDiv::upperBound () const\fC [inline]\fP"
.PP
\fBReturns:\fP
.RS 4
upper bound 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBlowerBound()\fP 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Qwt User's Guide from the source code.
